# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.
#
# OpenCRVS is also distributed under the terms of the Civil Registration
# & Healthcare Disclaimer located at http://opencrvs.org/license.
#
# Copyright (C) The OpenCRVS Authors located at https://github.com/opencrvs/opencrvs-core/blob/master/AUTHORS.
---
- hosts: localhost
  tasks:
    - name: Generate SSH keypair for application -> backup server connection
      command: ssh-keygen -t rsa -b 4096 -f /tmp/backup_ssh_key -N ""
      tags:
        - backups

- hosts: docker-manager-first
  vars:
    crontab_user: root
  tasks:
    - name: Check if crontab user already has an ssh key
      stat:
        path: /home/{{ crontab_user }}/.ssh/id_rsa.pub
      register: file_check
      tags:
        - backups

    - name: Create an SSH key for crontab user if they do not have one
      copy:
        src: /tmp/backup_ssh_key
        dest: /home/{{ crontab_user }}/.ssh/id_rsa
        mode: 0600
      when: not file_check.stat.exists
      tags:
        - backups

    - include_tasks:
        file: backups/crontab.yml
        apply:
          tags:
            - crontab
            - backups
      tags:
        - crontab
        - backups

    - name: Fetch the public SSH key so it can be transferred to the backup machine
      fetch:
        src: /home/{{ crontab_user }}/.ssh/id_rsa.pub
        dest: '/tmp/{{ inventory_hostname }}_id_rsa.pub'
        flat: yes
      when: file_check.stat.exists
      tags:
        - backups

- hosts: backups
  become: yes
  become_method: sudo
  tasks:
    - name: Ensure backup user is present
      user:
        name: '{{ external_backup_server_user }}'
        state: present
        create_home: true
        shell: /bin/bash
        home: '/home/{{ external_backup_server_user }}'
      tags:
        - backups

    - name: Check if authorized_keys already exists
      stat:
        path: /home/{{ external_backup_server_user }}/.ssh/authorized_keys
      register: file_check
      tags:
        - backups

    - name: Ensure .ssh directory exists
      file:
        path: '/home/{{ external_backup_server_user }}/.ssh'
        state: directory
        owner: '{{ external_backup_server_user }}'
        mode: '0700'
      tags:
        - backups

    - name: Ensure backup application servers can login to backup server
      blockinfile:
        path: /home/{{ external_backup_server_user }}/.ssh/authorized_keys
        block: |
          {{ lookup('file', '/tmp/docker-manager-first_id_rsa.pub') }}
        marker: '# {mark} ANSIBLE MANAGED BLOCK docker-manager-first'
        create: yes
        mode: 0600
      tags:
        - backups

    - name: 'Create backup directory'
      file:
        path: '{{ external_backup_server_remote_directory }}'
        state: directory
        owner: '{{ external_backup_server_user }}'
      tags:
        - backups
